import { Injectable } from '@angular/core';
import { ShuffleService } from '../services/shuffle.service';

@Injectable()

export class CreateQuestionsService {
  questionsArray = [];
  allArray;

  constructor(
    private _shuffleService: ShuffleService
  ) { }

  arrayJsArray = [
    {
      question: `
      Написать инструкцию do while
      let a = 10;
      b = 20;
      c = 0;
      a = a*2;
      c < 5;`,
      answer: `
      do {
        a = a*2;
        console.log(a);
        c++;
      }
      while (c < 5);`
    },
    {
      question: `
      Написать инструкцию while
      let a = 2;
      let i = 0;
      a = a + 1`,
      answer: `
      while (i < 10) {
        a = a + 1;
        console.log('Шаг - ' + i + ' Ответ - ' + a);
        i++;
      }`
    },
    {
      question: `
      Что выведет в консоли:
      let c = 1;
      for (let i = 0; i < 10; i++) {
        c = c*2;
        if (i === 5) {
          break;
        }
        console.log('Шаг ' + i + '- '+ c);
      }`,
      answer: `
      Шаг 0- 2
      Шаг 1- 4
      Шаг 2- 8
      Шаг 3- 16
      Шаг 4- 32`,
    },
    {
      question: `
      Что выведет в консоли:
      let c = 1;
      for (let i = 0; i < 7; i++) {
        c = c*2;
        if (i === 5) {
          continue;
        }
        console.log('Шаг ' + i + '- '+ c);
      }`,
      answer: `
      Шаг 0- 2
      Шаг 1- 4
      Шаг 2- 8
      Шаг 3- 16
      Шаг 4- 32
      Шаг 6- 128`
    }
  ];

  arrayJsRound = [
    {
      question: 'Какое булево значение вернется если: 1,2,3, Infinity, -Infinity, \'string\'',
      answer: 'Ответ: True'
    },
    {
      question: 'Какое булево значение вернется если: 0, -0, null, NaN, Undefined',
      answer: 'Ответ: False'
    },
    {
      question: `
    Написать инструкцию switch
    let a = 10;
    let b = 20;`,
      answer: `
      switch (a) {
        case 10:
        console.log('10');
        break;
        case 20:
        console.log('20');
        break;
        default:
        console.log('default');
        break;
      }
      //10`,
    },

    // {
    //   question: ``,
    //   answer:``
    // },

  ];

  arraySchemeTherapy = [
    {
      question: `По какому признаку узнать, что активируется схема?`,
      answer: `вознимают сильные негативные чувства: тревога, смущение и т.д.`
    },
    {
      question: `Что такое схема (РДС)?`,
      answer: `модель жизни, которая влияет на чувства, мысли, поведение, образы, отношения, восприятие социальных ситуаций`
    },
    {
      question: `Когда схему можно назвать патологической?`,
      answer: `когда схема связана с патологическими эмоциями и влияет на социальное функционирование`
    },
    {
      question: `Когда развивается схема (РДС)?`,
      answer: `
      когда не были удовлетворены базовые потребности в межличностной близости
      и надежной привязанности, когда недостаточно дисциплинировали`
    },
    {
      question: `Назвать схемы сферы Автономии, идентичности, достижений?`,
      answer: `зависимость, уязвимость к ущербу/болезням, слияние, некомпетентность/обереченность на неудачу`
    },
    {
      question: `Какие потребности лежат в сфере автономии?`,
      answer: `потребность в автономии, собственной идентичности, достижениях`
    },
    {
      question: `Назвать девиз схемы "Зависимость"?`,
      answer: `Я сам по себе ничего не могу`
    },
    {
      question: `Доминирующее чувство схемы "Зависимость"?`,
      answer: `беспомощность`
    },
    {
      question: `В чем суть схемы "Зависимость"?`,
      answer: `убеждение, что не справится с повседневными задачами жизни`
    },
    {
      question: `Назвать 2 пути развития схемы "Зависимость"?`,
      answer: `
    1 путь: чрезмерно высокие требования от ребенка;
    2 путь: недостаточно требований к ребенку`
    },
    {
      question: `Как схема "Зависимость" может проявляться в терапии?`,
      answer: `энтузиазм клиента, но нет прогресса`
    },
    {
      question: `Схема "Зависимость" и коппинг-стратегии?`,
      answer: `
    Капитуляция: постоянно просит о помощи, гиперопекающий другой, который все делает за человека;
    Избегание: избегает ответственности, принятия решений, избегает действовать самостоятельно;
    Гиперкомпенсация: излишне уверен в себе, не просит о помощи, когда можно и уместно попросить.`
    },
    {
      question: `Назвать девиз схемы "Уязвимость к ущербу/болезням"?`,
      answer: `Все может рухнуть в любую минуту`
    },
    {
      question: `Для кого характерна схема "Уязвимость к ущербу/болезням"?`,
      answer: `для людей с иппохондрией, генерализованным тревожным расстройством`
    },
    {
      question: `Доминирующее чувство схемы "Уязвимость к ущербу/болезням"?`,
      answer: `чрезмерная тревожность`
    },
    {
      question: `В чем суть схемы "Уязвимость к ущербу/болезням"?`,
      answer: `мир опасен, в любую минуту произойдет что-то катастрофическое с чем нельзя справиться`
    },
    {
      question: `Назвать пути развития схемы "Уязвимость к ущербу/болезням"?`,
      answer: `
      от родителей, которые чрезмерно беспокоились, были осторожными и
      предупреждали о серъезных болезнях, требовали чрезмерной осторожности и внимательности от ребенка;
      жертвы катастроф, тяжелых болезней`
    },
    {
      question: `Схема "Уязвимость к ущербу/болезням? и коппинг-стратегии?`,
      answer: `
      Капитуляция: постоянно переживает что с ним случится катастрофа, постоянно просит у других утешения;
      Избегание: избегает опасных ситуаций; Гиперкомпенсация: ритуалы, опасные ситуации`
    },
    {
      question: `Назвать девиз схемы "Слияние"?`,
      answer: `Без тебя нет меня`
    },
    {
      question: `В чем суть схемы "Слияние"?`,
      answer: `слабая собственная идентичность, вместо "я" - "мы", другой смысл жизни, чрезмерная вовлеченность в жизнь другого`
    },
    {
      question: `С чем может быть связана схема "Слияние"?`,
      answer: `с обсессивно-компульсивными симптомами`
    },
    {
      question: `Схема "Слияние" и коппинг-стратегии?`,
      answer: `
      Капитуляция: имитирует поведение другого, постоянно запрашивает его мнение;
      Избегание: избегает тех, с кем не может вступить в слияние; Гиперкомпенсация: чрезмерная автономия
      `
    },
    {
      question: `В чем суть схемы "Некомпетентность(несостоятельность)/обреченность на неудачу"?`,
      answer: `убежденность в собственной некомпетентности, неспособности справляться, прилагают огромных усилий`
    },
    {
      question: `Назвать пути формирования схемы "Некомпетентность(несостоятельность)/обреченность на неудачу"?`,
      answer: `
      негативная обратная связь в семье или школе, полное обесценивание;
      участие в соревнованиях ориентированных на высокие достижения и успех, перфекционистских видах деятельности
      `
    },
    {
      question: `Схема "Некомпетентность(несостоятельность)/обреченность на неудачу" и коппинг-стратегии?`,
      answer: `
      Капитуляция: работа ниже возможностей, сравнение своих достижений с другими;
      Избегание: прокрастинация, избегает сложных задач, новых целей;
      Гиперкомпенсация: трудоголизм, обесценивание  чужих достижений
      `
    },
    {
      question: `"Самозбывающееся пророчество", о чем это и к чему относится?`,
      answer: `
      иногда так работает схема "Некомпетентность(несостоятельность)/обреченность на неудачу",
      постоянное избегание ситуаций, в которых что-то требует приводит к плохой подготовке
      и в итоге провалу, когда таких ситуаций невозможно избежать.
      `
    },
    {
      question: `Пути развития схем из сферы "Потребность в реалистичных границах/самоконтроле"?`,
      answer: `
      1) родители не придерживались границ;
      2) были излишне суровыми, требовали дисциплины (протест);
      3) отсутствовали правила
      `
    },
    {
      question: `Девиз схемы "Особый статус/право"?`,
      answer: `Я должен получить то, что хочу`
    },
    {
      question: `В чем суть схемы "Особый статус/право"?`,
      answer: `
      убежденность в привелегированности, важности своих
      потребностей/желаний, власть, контроль, высокомерность`
    },
    {
      question: `Кому присуща схема "Особый статус/право"?`,
      answer: `нарциссическому типу личности`
    },
    {
      question: `Как развивается схема "Особый статус/право"?`,
      answer: `семейным моделированием, поощрение высокомерного, властного поведения`
    },
    {
      question: `Схема "Особый статус/право" и коппинг-стратегии?`,
      answer: `
      Капитуляция: ведет себя эгоистично, игнорирует потребности других, стремится доминировать;
      Избегание: общается с теми, кого считает ниже себя, избегает ситуаций, где не может превзойти;
      Гиперкомпенсация: благотворительность больше, чем может
      `
    },
    {
      question: `Девиз схемы "Недостаточность дисциплины/самоконтроля"?`,
      answer: `Невозможно удержаться`
    },
    {
      question: `В чем суть схемы "Недостаточность дисциплины/самоконтроля"?`,
      answer: `
      Не могут/не хотят контролировать свои чувства/желания;
      не доделывают до конца нудные дела
      `
    },
    {
      question: `Назвать пути развития схемы "Недостаточность дисциплины/самоконтроля"?`,
      answer: `семейное моделирование, недостаточная опека, родители не могли справиться с темпераментом ребенка`
    },
    {
      question: `Схема "Недостаточность дисциплины/самоконтроля" и коппинг-стратегии?`,
      answer: `
      Капитуляция: азартные игры, алкоголь, наркотики, теряет контроль над эмоциями, обжорство;
      Избегание: не работает/бросает учебное заведение; не ставит долгосрочных целей;
      Гиперкомпенсация: чрезмерный самоконтроль, значительные усилия, чтобы закончить проект
      `
    },
  ];

  craeteAllArray() {
    this.allArray = {
      'arrayJsArray': this.arrayJsArray,
      'arrayJsRound': this.arrayJsRound,
      'arraySchemeTherapy': this.arraySchemeTherapy
    };
  }

  createQuestionsArray(array, mode) {
    this.questionsArray = [];
    for (let i = 0; i < array.length; i++) {
      const item = array[i];
        const tmpLength = this.allArray[item].length;
        // tslint:disable-next-line:no-shadowed-variable
        for (let i = 0; i < tmpLength; i++) {
          this.questionsArray.push(this.allArray[item][i]);
        }
    }
    if (mode) {
      this.questionsArray = this._shuffleService.mixIt(this.questionsArray);
    }
    return this.questionsArray;
  }
}
